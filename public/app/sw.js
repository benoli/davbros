/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/sw.js":
/*!****************************!*\
  !*** ./resources/js/sw.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/*jshint esversion: 6 */\n\n/* eslint-disable no-console */\nvar version = \"Beta 0.2\"; // Only for internal purppouse. Change this every time i need to reload the SW\n\nvar DEBUG = true;\nconsole.log('Update SW'); // When the user navigates to your site,\n// the browser tries to redownload the script file that defined the service\n// worker in the background.\n// If there is even a byte's difference in the service worker file compared\n// to what it currently has, it considers it 'new'.\n// console.log(global);\n// const { assets } = global.serviceWorkerOption;\n// let { assets } = {};\n\nvar CACHE_NAME = new Date().toISOString(); // let assetsToCache = [...assets, 'https://fonts.googleapis.com/icon?family=Material+Icons', '/app/inicio', '/app/camionetas', \n//     '/app/pedidos', '/app/cierres', '/app/cargas', '/app/clientes', \n//     '/app/autorizacion', '/app/usuarios', '/app/soporte',\n//     '/css/materialize.min.css', '/js/materialize.min.js', '/css/datatables.min.css', '/js/jquery-3.3.1.min.js',\n//     '/js/datatables.min.js', 'https://fonts.gstatic.com/s/materialicons/v88/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2',\n//     '/manifest.json'    \n//   ];\n\nvar assetsToCache = ['https://fonts.googleapis.com/icon?family=Material+Icons', '/app/inicio', '/app/clientes', '/app/sectores', '/app/planillas', '/app/notificaciones', '/app/users', '/css/materialize.min.css', '/js/materialize.min.js', '/css/datatables.min.css', '/css/app.css', '/js/ui.js', '/js/app_clientes.js', '/js/app_sectores.js', '/js/app_planillas.js', '/js/datatables.min.js', 'https://fonts.gstatic.com/s/materialicons/v88/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2', '/manifest.json', '/images/manifest-icon-192.png', '/images/manifest-icon-512.png']; // let assetsToCache = [ '/images/manifest-icon-192.png', '/images/manifest-icon-512.png'\n// ];\n\nvar assetsToSkip = ['/', '/app', '/logout', '/api/users', 'https://db.davbros.com.ar']; // console.log('Assets before process');\n// console.log(assetsToCache);\n\nassetsToCache = assetsToCache.map(function (path) {\n  return new URL(path, __webpack_require__.g.location).toString();\n});\nconsole.log('Assets after process');\nconsole.log(assetsToCache); // When the service worker is first added to a computer.\n\nself.addEventListener('install', function (event) {\n  // Perform install steps.\n  if (DEBUG) {\n    console.log('[SW] Install event');\n    console.log(__webpack_require__.g.location);\n  } // fetch('/mix-manifest.json', { redirect: 'follow' })\n  // .then(response => response.json())\n  //     .then(data => assets = data)\n  //         .then( ()=> {console.log(`Assets are => `)\n  //                     console.log(assets)}\n  //         )\n  // ;\n  // Add core website files to cache during serviceworker installation.\n\n\n  event.waitUntil(__webpack_require__.g.caches.open(CACHE_NAME).then(function (cache) {\n    //console.log(assetsToCache);\n    // Save cache name on server\n    assetsToCache.map(function (asset) {\n      try {\n        console.log(\"Asset is => \".concat(asset));\n        cache.add(asset);\n      } catch (error) {\n        console.log(\"Error adding to cache. Resource => \".concat(asset));\n      }\n    });\n    return cache;\n  }).then(function () {\n    if (DEBUG) {\n      console.log('Cached assets: main', assetsToCache);\n    }\n  })[\"catch\"](function (error) {\n    console.log(\"Error on cache.addAll => \".concat(error));\n    console.error(error); // throw error;\n  }));\n}); // After the install event.\n\nself.addEventListener('activate', function (event) {\n  if (DEBUG) {\n    console.log('[SW] Activate event');\n  } // Clean the caches\n\n\n  event.waitUntil(__webpack_require__.g.caches.keys().then(function (cacheNames) {\n    return Promise.all(cacheNames.map(function (cacheName) {\n      console.log(cacheName); // Delete the caches that are not the current one.\n\n      if (cacheName.indexOf(CACHE_NAME) === 0) {\n        return null;\n      }\n\n      return __webpack_require__.g.caches[\"delete\"](cacheName);\n    }));\n  }));\n});\nself.addEventListener('message', function (event) {\n  switch (event.data.action) {\n    case 'skipWaiting':\n      if (self.skipWaiting) {\n        self.skipWaiting();\n        self.clients.claim();\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});\nself.addEventListener('fetch', function (event) {\n  var request = event.request; // Ignore not GET request.\n\n  if (request.method !== 'GET') {\n    if (DEBUG) {\n      console.log(\"[SW] Ignore non GET request \".concat(request.method));\n    }\n\n    return;\n  } // Ignore online features. / Login & Logout\n\n\n  if (assetsToSkip.includes(request.url)) {\n    return;\n  }\n\n  var requestUrl = new URL(request.url); // Ignore DB access.\n\n  if (requestUrl.origin === 'https://db.davbros.com.ar') {\n    if (DEBUG) {\n      console.log(\"[SW] Ignore difference origin \".concat(requestUrl.origin));\n    }\n\n    return;\n  }\n\n  var resource = __webpack_require__.g.caches.match(request).then(function (response) {\n    if (response) {\n      if (DEBUG) {\n        console.log(\"[SW] fetch URL \".concat(requestUrl.href, \" from cache\"));\n      }\n\n      return response;\n    } // Load and cache known assets.\n\n\n    return fetch(request, {\n      redirect: 'follow'\n    }).then(function (responseNetwork) {\n      if (!responseNetwork || !responseNetwork.ok) {\n        if (DEBUG) {\n          console.log(\"[SW] URL [\".concat(requestUrl.toString(), \"] wrong responseNetwork: \").concat(responseNetwork.status, \" \").concat(responseNetwork.type));\n        }\n\n        return responseNetwork;\n      }\n\n      if (DEBUG) {\n        console.log(\"[SW] URL \".concat(requestUrl.href, \" fetched\"));\n      }\n\n      var responseCache = responseNetwork.clone();\n      __webpack_require__.g.caches.open(CACHE_NAME).then(function (cache) {\n        // console.log('Request');\n        // console.log(request);\n        // console.log('ResponseCache');\n        // console.log(responseCache);\n        // // Ahora lo vemos\n        // if (assetsToSkip.includes(request.url)) {\n        //   return responseNetwork;\n        // }\n        return cache.put(request, responseCache);\n      }).then(function () {\n        if (DEBUG) {\n          console.log(\"[SW] Cache asset: \".concat(requestUrl.href));\n        }\n      });\n      return responseNetwork;\n    })[\"catch\"](function () {\n      // User is landing on our page.\n      if (event.request.mode === 'navigate') {\n        return __webpack_require__.g.caches.match('./');\n      }\n\n      return null;\n    });\n  });\n  event.respondWith(resource);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvc3cuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFFQSxJQUFNQSxPQUFPLGFBQWIsQyxDQUE0Qjs7QUFDNUIsSUFBTUMsS0FBSyxHQUFHLElBQWQ7QUFDQUMsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWixFLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQyxVQUFVLEdBQUcsSUFBSUMsSUFBSixHQUFXQyxXQUFYLEVBQW5CLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDRSxJQUFJQyxhQUFhLEdBQUcsQ0FBQyx5REFBRCxFQUE0RCxhQUE1RCxFQUEyRSxlQUEzRSxFQUNwQixlQURvQixFQUNILGdCQURHLEVBQ2UscUJBRGYsRUFDc0MsWUFEdEMsRUFFcEIsMEJBRm9CLEVBRVEsd0JBRlIsRUFFa0MseUJBRmxDLEVBRTZELGNBRjdELEVBRTZFLFdBRjdFLEVBRTBGLHFCQUYxRixFQUdwQixxQkFIb0IsRUFHRyxzQkFISCxFQUlwQix1QkFKb0IsRUFJSyx3RkFKTCxFQUtwQixnQkFMb0IsRUFLRiwrQkFMRSxFQUsrQiwrQkFML0IsQ0FBcEIsQyxDQU9GO0FBQ0E7O0FBQ0EsSUFBSUMsWUFBWSxHQUFHLENBQUMsR0FBRCxFQUFNLE1BQU4sRUFBYyxTQUFkLEVBQXlCLFlBQXpCLEVBQXVDLDJCQUF2QyxDQUFuQixDLENBRUE7QUFDQTs7QUFDQUQsYUFBYSxHQUFHQSxhQUFhLENBQUNFLEdBQWQsQ0FBa0IsVUFBQUMsSUFBSSxFQUFJO0FBQ3hDLFNBQU8sSUFBSUMsR0FBSixDQUFRRCxJQUFSLEVBQWNFLHFCQUFNLENBQUNDLFFBQXJCLEVBQStCQyxRQUEvQixFQUFQO0FBQ0QsQ0FGZSxDQUFoQjtBQUlBWixPQUFPLENBQUNDLEdBQVIsQ0FBWSxzQkFBWjtBQUNBRCxPQUFPLENBQUNDLEdBQVIsQ0FBWUksYUFBWixFLENBRUE7O0FBQ0FRLElBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBaUMsVUFBQUMsS0FBSyxFQUFJO0FBQ3hDO0FBQ0EsTUFBSWhCLEtBQUosRUFBVztBQUNUQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQkFBWjtBQUNBRCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVMscUJBQU0sQ0FBQ0MsUUFBbkI7QUFDRCxHQUx1QyxDQU94QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQUksRUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQ0VOLHFCQUFNLENBQUNPLE1BQVAsQ0FDR0MsSUFESCxDQUNRaEIsVUFEUixFQUVHaUIsSUFGSCxDQUVRLFVBQUFDLEtBQUssRUFBSTtBQUNiO0FBQ0E7QUFDQWYsSUFBQUEsYUFBYSxDQUFDRSxHQUFkLENBQWtCLFVBQUFjLEtBQUssRUFBSTtBQUN6QixVQUFJO0FBQ0ZyQixRQUFBQSxPQUFPLENBQUNDLEdBQVIsdUJBQTJCb0IsS0FBM0I7QUFDQUQsUUFBQUEsS0FBSyxDQUFDRSxHQUFOLENBQVVELEtBQVY7QUFDRCxPQUhELENBR0UsT0FBT0UsS0FBUCxFQUFjO0FBQ2R2QixRQUFBQSxPQUFPLENBQUNDLEdBQVIsOENBQWtEb0IsS0FBbEQ7QUFDRDtBQUNGLEtBUEQ7QUFRQSxXQUFPRCxLQUFQO0FBQ0QsR0FkSCxFQWVHRCxJQWZILENBZVEsWUFBTTtBQUNWLFFBQUlwQixLQUFKLEVBQVc7QUFDVEMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVosRUFBbUNJLGFBQW5DO0FBQ0Q7QUFDRixHQW5CSCxXQW9CUyxVQUFBa0IsS0FBSyxFQUFJO0FBQ2R2QixJQUFBQSxPQUFPLENBQUNDLEdBQVIsb0NBQXdDc0IsS0FBeEM7QUFDQXZCLElBQUFBLE9BQU8sQ0FBQ3VCLEtBQVIsQ0FBY0EsS0FBZCxFQUZjLENBR2Q7QUFDRCxHQXhCSCxDQURGO0FBMkJELENBM0NELEUsQ0E2Q0E7O0FBQ0FWLElBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0IsVUFBdEIsRUFBa0MsVUFBQUMsS0FBSyxFQUFJO0FBQ3pDLE1BQUloQixLQUFKLEVBQVc7QUFDVEMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVo7QUFDRCxHQUh3QyxDQUt6Qzs7O0FBQ0FjLEVBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUNFTixxQkFBTSxDQUFDTyxNQUFQLENBQWNPLElBQWQsR0FBcUJMLElBQXJCLENBQTBCLFVBQUFNLFVBQVUsRUFBSTtBQUN0QyxXQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FDTEYsVUFBVSxDQUFDbEIsR0FBWCxDQUFlLFVBQUFxQixTQUFTLEVBQUk7QUFDMUI1QixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWTJCLFNBQVosRUFEMEIsQ0FFMUI7O0FBQ0EsVUFBSUEsU0FBUyxDQUFDQyxPQUFWLENBQWtCM0IsVUFBbEIsTUFBa0MsQ0FBdEMsRUFBeUM7QUFDdkMsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsYUFBT1EscUJBQU0sQ0FBQ08sTUFBUCxXQUFxQlcsU0FBckIsQ0FBUDtBQUNELEtBUkQsQ0FESyxDQUFQO0FBV0QsR0FaRCxDQURGO0FBZUQsQ0FyQkQ7QUF1QkFmLElBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBaUMsVUFBQUMsS0FBSyxFQUFJO0FBQ3hDLFVBQVFBLEtBQUssQ0FBQ2UsSUFBTixDQUFXQyxNQUFuQjtBQUNFLFNBQUssYUFBTDtBQUNFLFVBQUlsQixJQUFJLENBQUNtQixXQUFULEVBQXNCO0FBQ3BCbkIsUUFBQUEsSUFBSSxDQUFDbUIsV0FBTDtBQUNBbkIsUUFBQUEsSUFBSSxDQUFDb0IsT0FBTCxDQUFhQyxLQUFiO0FBQ0Q7O0FBQ0Q7O0FBQ0Y7QUFDRTtBQVJKO0FBVUQsQ0FYRDtBQWFBckIsSUFBSSxDQUFDQyxnQkFBTCxDQUFzQixPQUF0QixFQUErQixVQUFBQyxLQUFLLEVBQUk7QUFDdEMsTUFBTW9CLE9BQU8sR0FBR3BCLEtBQUssQ0FBQ29CLE9BQXRCLENBRHNDLENBR3RDOztBQUNBLE1BQUlBLE9BQU8sQ0FBQ0MsTUFBUixLQUFtQixLQUF2QixFQUE4QjtBQUM1QixRQUFJckMsS0FBSixFQUFXO0FBQ1RDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUix1Q0FBMkNrQyxPQUFPLENBQUNDLE1BQW5EO0FBQ0Q7O0FBQ0Q7QUFDRCxHQVRxQyxDQVV0Qzs7O0FBQ0EsTUFBSTlCLFlBQVksQ0FBQytCLFFBQWIsQ0FBc0JGLE9BQU8sQ0FBQ0csR0FBOUIsQ0FBSixFQUF3QztBQUN0QztBQUNEOztBQUVELE1BQU1DLFVBQVUsR0FBRyxJQUFJOUIsR0FBSixDQUFRMEIsT0FBTyxDQUFDRyxHQUFoQixDQUFuQixDQWZzQyxDQWlCdEM7O0FBQ0EsTUFBSUMsVUFBVSxDQUFDQyxNQUFYLEtBQXNCLDJCQUExQixFQUF1RDtBQUNyRCxRQUFJekMsS0FBSixFQUFXO0FBQ1RDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUix5Q0FBNkNzQyxVQUFVLENBQUNDLE1BQXhEO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFFRCxNQUFNQyxRQUFRLEdBQUcvQixxQkFBTSxDQUFDTyxNQUFQLENBQWN5QixLQUFkLENBQW9CUCxPQUFwQixFQUE2QmhCLElBQTdCLENBQWtDLFVBQUF3QixRQUFRLEVBQUk7QUFDN0QsUUFBSUEsUUFBSixFQUFjO0FBQ1osVUFBSTVDLEtBQUosRUFBVztBQUNUQyxRQUFBQSxPQUFPLENBQUNDLEdBQVIsMEJBQThCc0MsVUFBVSxDQUFDSyxJQUF6QztBQUNEOztBQUVELGFBQU9ELFFBQVA7QUFDRCxLQVA0RCxDQVM3RDs7O0FBQ0EsV0FBT0UsS0FBSyxDQUFDVixPQUFELEVBQVU7QUFBRVcsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FBVixDQUFMLENBQ0ozQixJQURJLENBQ0MsVUFBQTRCLGVBQWUsRUFBSTtBQUN2QixVQUFJLENBQUNBLGVBQUQsSUFBb0IsQ0FBQ0EsZUFBZSxDQUFDQyxFQUF6QyxFQUE2QztBQUMzQyxZQUFJakQsS0FBSixFQUFXO0FBQ1RDLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixxQkFDZXNDLFVBQVUsQ0FBQzNCLFFBQVgsRUFEZixzQ0FFSW1DLGVBQWUsQ0FBQ0UsTUFGcEIsY0FHTUYsZUFBZSxDQUFDRyxJQUh0QjtBQUtEOztBQUVELGVBQU9ILGVBQVA7QUFDRDs7QUFFRCxVQUFJaEQsS0FBSixFQUFXO0FBQ1RDLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixvQkFBd0JzQyxVQUFVLENBQUNLLElBQW5DO0FBQ0Q7O0FBRUQsVUFBTU8sYUFBYSxHQUFHSixlQUFlLENBQUNLLEtBQWhCLEVBQXRCO0FBRUExQyxNQUFBQSxxQkFBTSxDQUFDTyxNQUFQLENBQ0dDLElBREgsQ0FDUWhCLFVBRFIsRUFFR2lCLElBRkgsQ0FFUSxVQUFBQyxLQUFLLEVBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBT0EsS0FBSyxDQUFDaUMsR0FBTixDQUFVbEIsT0FBVixFQUFtQmdCLGFBQW5CLENBQVA7QUFDRCxPQVpILEVBYUdoQyxJQWJILENBYVEsWUFBTTtBQUNWLFlBQUlwQixLQUFKLEVBQVc7QUFDVEMsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLDZCQUFpQ3NDLFVBQVUsQ0FBQ0ssSUFBNUM7QUFDRDtBQUNGLE9BakJIO0FBbUJBLGFBQU9HLGVBQVA7QUFDRCxLQXhDSSxXQXlDRSxZQUFNO0FBQ1g7QUFDQSxVQUFJaEMsS0FBSyxDQUFDb0IsT0FBTixDQUFjbUIsSUFBZCxLQUF1QixVQUEzQixFQUF1QztBQUNyQyxlQUFPNUMscUJBQU0sQ0FBQ08sTUFBUCxDQUFjeUIsS0FBZCxDQUFvQixJQUFwQixDQUFQO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0FoREksQ0FBUDtBQWlERCxHQTNEZ0IsQ0FBakI7QUE2REEzQixFQUFBQSxLQUFLLENBQUN3QyxXQUFOLENBQWtCZCxRQUFsQjtBQUNELENBdkZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF2YnJvcy8uL3Jlc291cmNlcy9qcy9zdy5qcz80NzI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qanNoaW50IGVzdmVyc2lvbjogNiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG5jb25zdCB2ZXJzaW9uID0gYEJldGEgMC4yYDsgLy8gT25seSBmb3IgaW50ZXJuYWwgcHVycHBvdXNlLiBDaGFuZ2UgdGhpcyBldmVyeSB0aW1lIGkgbmVlZCB0byByZWxvYWQgdGhlIFNXXG5jb25zdCBERUJVRyA9IHRydWU7XG5jb25zb2xlLmxvZygnVXBkYXRlIFNXJyk7XG5cbi8vIFdoZW4gdGhlIHVzZXIgbmF2aWdhdGVzIHRvIHlvdXIgc2l0ZSxcbi8vIHRoZSBicm93c2VyIHRyaWVzIHRvIHJlZG93bmxvYWQgdGhlIHNjcmlwdCBmaWxlIHRoYXQgZGVmaW5lZCB0aGUgc2VydmljZVxuLy8gd29ya2VyIGluIHRoZSBiYWNrZ3JvdW5kLlxuLy8gSWYgdGhlcmUgaXMgZXZlbiBhIGJ5dGUncyBkaWZmZXJlbmNlIGluIHRoZSBzZXJ2aWNlIHdvcmtlciBmaWxlIGNvbXBhcmVkXG4vLyB0byB3aGF0IGl0IGN1cnJlbnRseSBoYXMsIGl0IGNvbnNpZGVycyBpdCAnbmV3Jy5cbi8vIGNvbnNvbGUubG9nKGdsb2JhbCk7XG4vLyBjb25zdCB7IGFzc2V0cyB9ID0gZ2xvYmFsLnNlcnZpY2VXb3JrZXJPcHRpb247XG4vLyBsZXQgeyBhc3NldHMgfSA9IHt9O1xuXG5jb25zdCBDQUNIRV9OQU1FID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4vLyBsZXQgYXNzZXRzVG9DYWNoZSA9IFsuLi5hc3NldHMsICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2ljb24/ZmFtaWx5PU1hdGVyaWFsK0ljb25zJywgJy9hcHAvaW5pY2lvJywgJy9hcHAvY2FtaW9uZXRhcycsIFxuLy8gICAgICcvYXBwL3BlZGlkb3MnLCAnL2FwcC9jaWVycmVzJywgJy9hcHAvY2FyZ2FzJywgJy9hcHAvY2xpZW50ZXMnLCBcbi8vICAgICAnL2FwcC9hdXRvcml6YWNpb24nLCAnL2FwcC91c3VhcmlvcycsICcvYXBwL3NvcG9ydGUnLFxuLy8gICAgICcvY3NzL21hdGVyaWFsaXplLm1pbi5jc3MnLCAnL2pzL21hdGVyaWFsaXplLm1pbi5qcycsICcvY3NzL2RhdGF0YWJsZXMubWluLmNzcycsICcvanMvanF1ZXJ5LTMuMy4xLm1pbi5qcycsXG4vLyAgICAgJy9qcy9kYXRhdGFibGVzLm1pbi5qcycsICdodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvbWF0ZXJpYWxpY29ucy92ODgvZmxVaFJxNnR6WmNsUUVKLVZkZy1JdWlhRHNOY0loUTh0US53b2ZmMicsXG4vLyAgICAgJy9tYW5pZmVzdC5qc29uJyAgICBcbi8vICAgXTtcbiAgbGV0IGFzc2V0c1RvQ2FjaGUgPSBbJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMnLCAnL2FwcC9pbmljaW8nLCAnL2FwcC9jbGllbnRlcycsIFxuICAnL2FwcC9zZWN0b3JlcycsICcvYXBwL3BsYW5pbGxhcycsICcvYXBwL25vdGlmaWNhY2lvbmVzJywgJy9hcHAvdXNlcnMnLFxuICAnL2Nzcy9tYXRlcmlhbGl6ZS5taW4uY3NzJywgJy9qcy9tYXRlcmlhbGl6ZS5taW4uanMnLCAnL2Nzcy9kYXRhdGFibGVzLm1pbi5jc3MnLCAnL2Nzcy9hcHAuY3NzJywgJy9qcy91aS5qcycsICcvanMvYXBwX2NsaWVudGVzLmpzJyxcbiAgJy9qcy9hcHBfc2VjdG9yZXMuanMnLCAnL2pzL2FwcF9wbGFuaWxsYXMuanMnLFxuICAnL2pzL2RhdGF0YWJsZXMubWluLmpzJywgJ2h0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9tYXRlcmlhbGljb25zL3Y4OC9mbFVoUnE2dHpaY2xRRUotVmRnLUl1aWFEc05jSWhROHRRLndvZmYyJyxcbiAgJy9tYW5pZmVzdC5qc29uJywgJy9pbWFnZXMvbWFuaWZlc3QtaWNvbi0xOTIucG5nJywgJy9pbWFnZXMvbWFuaWZlc3QtaWNvbi01MTIucG5nJyBcbl07XG4vLyBsZXQgYXNzZXRzVG9DYWNoZSA9IFsgJy9pbWFnZXMvbWFuaWZlc3QtaWNvbi0xOTIucG5nJywgJy9pbWFnZXMvbWFuaWZlc3QtaWNvbi01MTIucG5nJ1xuLy8gXTtcbmxldCBhc3NldHNUb1NraXAgPSBbJy8nLCAnL2FwcCcsICcvbG9nb3V0JywgJy9hcGkvdXNlcnMnLCAnaHR0cHM6Ly9kYi5kYXZicm9zLmNvbS5hciddO1xuXG4vLyBjb25zb2xlLmxvZygnQXNzZXRzIGJlZm9yZSBwcm9jZXNzJyk7XG4vLyBjb25zb2xlLmxvZyhhc3NldHNUb0NhY2hlKTtcbmFzc2V0c1RvQ2FjaGUgPSBhc3NldHNUb0NhY2hlLm1hcChwYXRoID0+IHtcbiAgcmV0dXJuIG5ldyBVUkwocGF0aCwgZ2xvYmFsLmxvY2F0aW9uKS50b1N0cmluZygpO1xufSk7XG5cbmNvbnNvbGUubG9nKCdBc3NldHMgYWZ0ZXIgcHJvY2VzcycpO1xuY29uc29sZS5sb2coYXNzZXRzVG9DYWNoZSk7XG5cbi8vIFdoZW4gdGhlIHNlcnZpY2Ugd29ya2VyIGlzIGZpcnN0IGFkZGVkIHRvIGEgY29tcHV0ZXIuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBldmVudCA9PiB7IFxuICAvLyBQZXJmb3JtIGluc3RhbGwgc3RlcHMuXG4gIGlmIChERUJVRykge1xuICAgIGNvbnNvbGUubG9nKCdbU1ddIEluc3RhbGwgZXZlbnQnKTtcbiAgICBjb25zb2xlLmxvZyhnbG9iYWwubG9jYXRpb24pO1xuICB9XG5cbiAgLy8gZmV0Y2goJy9taXgtbWFuaWZlc3QuanNvbicsIHsgcmVkaXJlY3Q6ICdmb2xsb3cnIH0pXG4gIC8vIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgLy8gICAgIC50aGVuKGRhdGEgPT4gYXNzZXRzID0gZGF0YSlcbiAgLy8gICAgICAgICAudGhlbiggKCk9PiB7Y29uc29sZS5sb2coYEFzc2V0cyBhcmUgPT4gYClcbiAgLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhc3NldHMpfVxuICAvLyAgICAgICAgIClcbiAgLy8gO1xuXG4gIC8vIEFkZCBjb3JlIHdlYnNpdGUgZmlsZXMgdG8gY2FjaGUgZHVyaW5nIHNlcnZpY2V3b3JrZXIgaW5zdGFsbGF0aW9uLlxuICBldmVudC53YWl0VW50aWwoXG4gICAgZ2xvYmFsLmNhY2hlc1xuICAgICAgLm9wZW4oQ0FDSEVfTkFNRSlcbiAgICAgIC50aGVuKGNhY2hlID0+IHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhhc3NldHNUb0NhY2hlKTtcbiAgICAgICAgLy8gU2F2ZSBjYWNoZSBuYW1lIG9uIHNlcnZlclxuICAgICAgICBhc3NldHNUb0NhY2hlLm1hcChhc3NldCA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBc3NldCBpcyA9PiAke2Fzc2V0fWApO1xuICAgICAgICAgICAgY2FjaGUuYWRkKGFzc2V0KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGFkZGluZyB0byBjYWNoZS4gUmVzb3VyY2UgPT4gJHthc3NldH1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDYWNoZWQgYXNzZXRzOiBtYWluJywgYXNzZXRzVG9DYWNoZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3Igb24gY2FjaGUuYWRkQWxsID0+ICR7ZXJyb3J9YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAvLyB0aHJvdyBlcnJvcjtcbiAgICAgIH0pXG4gICk7XG59KTtcblxuLy8gQWZ0ZXIgdGhlIGluc3RhbGwgZXZlbnQuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2FjdGl2YXRlJywgZXZlbnQgPT4ge1xuICBpZiAoREVCVUcpIHtcbiAgICBjb25zb2xlLmxvZygnW1NXXSBBY3RpdmF0ZSBldmVudCcpO1xuICB9XG5cbiAgLy8gQ2xlYW4gdGhlIGNhY2hlc1xuICBldmVudC53YWl0VW50aWwoXG4gICAgZ2xvYmFsLmNhY2hlcy5rZXlzKCkudGhlbihjYWNoZU5hbWVzID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgY2FjaGVOYW1lcy5tYXAoY2FjaGVOYW1lID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhjYWNoZU5hbWUpO1xuICAgICAgICAgIC8vIERlbGV0ZSB0aGUgY2FjaGVzIHRoYXQgYXJlIG5vdCB0aGUgY3VycmVudCBvbmUuXG4gICAgICAgICAgaWYgKGNhY2hlTmFtZS5pbmRleE9mKENBQ0hFX05BTUUpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZ2xvYmFsLmNhY2hlcy5kZWxldGUoY2FjaGVOYW1lKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcbn0pO1xuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBldmVudCA9PiB7XG4gIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcbiAgICBjYXNlICdza2lwV2FpdGluZyc6XG4gICAgICBpZiAoc2VsZi5za2lwV2FpdGluZykge1xuICAgICAgICBzZWxmLnNraXBXYWl0aW5nKCk7XG4gICAgICAgIHNlbGYuY2xpZW50cy5jbGFpbSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGV2ZW50ID0+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGV2ZW50LnJlcXVlc3Q7XG5cbiAgLy8gSWdub3JlIG5vdCBHRVQgcmVxdWVzdC5cbiAgaWYgKHJlcXVlc3QubWV0aG9kICE9PSAnR0VUJykge1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coYFtTV10gSWdub3JlIG5vbiBHRVQgcmVxdWVzdCAke3JlcXVlc3QubWV0aG9kfWApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gSWdub3JlIG9ubGluZSBmZWF0dXJlcy4gLyBMb2dpbiAmIExvZ291dFxuICBpZiAoYXNzZXRzVG9Ta2lwLmluY2x1ZGVzKHJlcXVlc3QudXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlcXVlc3RVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcblxuICAvLyBJZ25vcmUgREIgYWNjZXNzLlxuICBpZiAocmVxdWVzdFVybC5vcmlnaW4gPT09ICdodHRwczovL2RiLmRhdmJyb3MuY29tLmFyJykge1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coYFtTV10gSWdub3JlIGRpZmZlcmVuY2Ugb3JpZ2luICR7cmVxdWVzdFVybC5vcmlnaW59YCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlc291cmNlID0gZ2xvYmFsLmNhY2hlcy5tYXRjaChyZXF1ZXN0KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhgW1NXXSBmZXRjaCBVUkwgJHtyZXF1ZXN0VXJsLmhyZWZ9IGZyb20gY2FjaGVgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cblxuICAgIC8vIExvYWQgYW5kIGNhY2hlIGtub3duIGFzc2V0cy5cbiAgICByZXR1cm4gZmV0Y2gocmVxdWVzdCwgeyByZWRpcmVjdDogJ2ZvbGxvdycgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlTmV0d29yayA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2VOZXR3b3JrIHx8ICFyZXNwb25zZU5ldHdvcmsub2spIHtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICBgW1NXXSBVUkwgWyR7cmVxdWVzdFVybC50b1N0cmluZygpfV0gd3JvbmcgcmVzcG9uc2VOZXR3b3JrOiAke1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlTmV0d29yay5zdGF0dXNcbiAgICAgICAgICAgICAgfSAke3Jlc3BvbnNlTmV0d29yay50eXBlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlTmV0d29yaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBbU1ddIFVSTCAke3JlcXVlc3RVcmwuaHJlZn0gZmV0Y2hlZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VDYWNoZSA9IHJlc3BvbnNlTmV0d29yay5jbG9uZSgpO1xuXG4gICAgICAgIGdsb2JhbC5jYWNoZXNcbiAgICAgICAgICAub3BlbihDQUNIRV9OQU1FKVxuICAgICAgICAgIC50aGVuKGNhY2hlID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdSZXF1ZXN0Jyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXF1ZXN0KTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdSZXNwb25zZUNhY2hlJyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNwb25zZUNhY2hlKTtcbiAgICAgICAgICAgIC8vIC8vIEFob3JhIGxvIHZlbW9zXG4gICAgICAgICAgICAvLyBpZiAoYXNzZXRzVG9Ta2lwLmluY2x1ZGVzKHJlcXVlc3QudXJsKSkge1xuICAgICAgICAgICAgLy8gICByZXR1cm4gcmVzcG9uc2VOZXR3b3JrO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlLnB1dChyZXF1ZXN0LCByZXNwb25zZUNhY2hlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1NXXSBDYWNoZSBhc3NldDogJHtyZXF1ZXN0VXJsLmhyZWZ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlTmV0d29yaztcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvLyBVc2VyIGlzIGxhbmRpbmcgb24gb3VyIHBhZ2UuXG4gICAgICAgIGlmIChldmVudC5yZXF1ZXN0Lm1vZGUgPT09ICduYXZpZ2F0ZScpIHtcbiAgICAgICAgICByZXR1cm4gZ2xvYmFsLmNhY2hlcy5tYXRjaCgnLi8nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIGV2ZW50LnJlc3BvbmRXaXRoKHJlc291cmNlKTtcbn0pOyJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwiREVCVUciLCJjb25zb2xlIiwibG9nIiwiQ0FDSEVfTkFNRSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImFzc2V0c1RvQ2FjaGUiLCJhc3NldHNUb1NraXAiLCJtYXAiLCJwYXRoIiwiVVJMIiwiZ2xvYmFsIiwibG9jYXRpb24iLCJ0b1N0cmluZyIsInNlbGYiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ3YWl0VW50aWwiLCJjYWNoZXMiLCJvcGVuIiwidGhlbiIsImNhY2hlIiwiYXNzZXQiLCJhZGQiLCJlcnJvciIsImtleXMiLCJjYWNoZU5hbWVzIiwiUHJvbWlzZSIsImFsbCIsImNhY2hlTmFtZSIsImluZGV4T2YiLCJkYXRhIiwiYWN0aW9uIiwic2tpcFdhaXRpbmciLCJjbGllbnRzIiwiY2xhaW0iLCJyZXF1ZXN0IiwibWV0aG9kIiwiaW5jbHVkZXMiLCJ1cmwiLCJyZXF1ZXN0VXJsIiwib3JpZ2luIiwicmVzb3VyY2UiLCJtYXRjaCIsInJlc3BvbnNlIiwiaHJlZiIsImZldGNoIiwicmVkaXJlY3QiLCJyZXNwb25zZU5ldHdvcmsiLCJvayIsInN0YXR1cyIsInR5cGUiLCJyZXNwb25zZUNhY2hlIiwiY2xvbmUiLCJwdXQiLCJtb2RlIiwicmVzcG9uZFdpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/sw.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/sw.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;