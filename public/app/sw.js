/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/sw.js":
/*!****************************!*\
  !*** ./resources/js/sw.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/*jshint esversion: 6 */\n\n/* eslint-disable no-console */\nvar DEBUG = true;\nconsole.log('Update SW'); // When the user navigates to your site,\n// the browser tries to redownload the script file that defined the service\n// worker in the background.\n// If there is even a byte's difference in the service worker file compared\n// to what it currently has, it considers it 'new'.\n// console.log(global);\n// const { assets } = global.serviceWorkerOption;\n// let { assets } = {};\n\nvar CACHE_NAME = new Date().toISOString(); // let assetsToCache = [...assets, 'https://fonts.googleapis.com/icon?family=Material+Icons', '/app/inicio', '/app/camionetas', \n//     '/app/pedidos', '/app/cierres', '/app/cargas', '/app/clientes', \n//     '/app/autorizacion', '/app/usuarios', '/app/soporte',\n//     '/css/materialize.min.css', '/js/materialize.min.js', '/css/datatables.min.css', '/js/jquery-3.3.1.min.js',\n//     '/js/datatables.min.js', 'https://fonts.gstatic.com/s/materialicons/v88/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2',\n//     '/manifest.json'    \n//   ];\n\nvar assetsToCache = ['https://fonts.googleapis.com/icon?family=Material+Icons', '/app/inicio', '/app/clientes', '/app/sectores', '/app/planillas', '/app/notificaciones', '/app/users', '/css/materialize.min.css', '/js/materialize.min.js', '/css/datatables.min.css', '/css/app.css', '/js/ui.js', '/js/app_clientes.js', '/js/datatables.min.js', 'https://fonts.gstatic.com/s/materialicons/v88/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2', '/manifest.json', '/images/manifest-icon-192.png', '/images/manifest-icon-512.png']; // let assetsToCache = [ '/images/manifest-icon-192.png', '/images/manifest-icon-512.png'\n// ];\n\nvar assetsToSkip = ['/', '/app', '/app/logout', '/api/users', 'https://db.davbros.com.ar']; // console.log('Assets before process');\n// console.log(assetsToCache);\n\nassetsToCache = assetsToCache.map(function (path) {\n  return new URL(path, __webpack_require__.g.location).toString();\n});\nconsole.log('Assets after process');\nconsole.log(assetsToCache); // When the service worker is first added to a computer.\n\nself.addEventListener('install', function (event) {\n  // Perform install steps.\n  if (DEBUG) {\n    console.log('[SW] Install event');\n    console.log(__webpack_require__.g.location);\n  } // fetch('/mix-manifest.json', { redirect: 'follow' })\n  // .then(response => response.json())\n  //     .then(data => assets = data)\n  //         .then( ()=> {console.log(`Assets are => `)\n  //                     console.log(assets)}\n  //         )\n  // ;\n  // Add core website files to cache during serviceworker installation.\n\n\n  event.waitUntil(__webpack_require__.g.caches.open(CACHE_NAME).then(function (cache) {\n    //console.log(assetsToCache);\n    // Save cache name on server\n    assetsToCache.map(function (asset) {\n      try {\n        console.log(\"Asset is => \".concat(asset));\n        cache.add(asset);\n      } catch (error) {\n        console.log(\"Error adding to cache. Resource => \".concat(asset));\n      }\n    });\n    return cache;\n  }).then(function () {\n    if (DEBUG) {\n      console.log('Cached assets: main', assetsToCache);\n    }\n  })[\"catch\"](function (error) {\n    console.log(\"Error on cache.addAll => \".concat(error));\n    console.error(error); // throw error;\n  }));\n}); // After the install event.\n\nself.addEventListener('activate', function (event) {\n  if (DEBUG) {\n    console.log('[SW] Activate event');\n  } // Clean the caches\n\n\n  event.waitUntil(__webpack_require__.g.caches.keys().then(function (cacheNames) {\n    return Promise.all(cacheNames.map(function (cacheName) {\n      console.log(cacheName); // Delete the caches that are not the current one.\n\n      if (cacheName.indexOf(CACHE_NAME) === 0) {\n        return null;\n      }\n\n      return __webpack_require__.g.caches[\"delete\"](cacheName);\n    }));\n  }));\n});\nself.addEventListener('message', function (event) {\n  switch (event.data.action) {\n    case 'skipWaiting':\n      if (self.skipWaiting) {\n        self.skipWaiting();\n        self.clients.claim();\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});\nself.addEventListener('fetch', function (event) {\n  var request = event.request; // Ignore not GET request.\n\n  if (request.method !== 'GET') {\n    if (DEBUG) {\n      console.log(\"[SW] Ignore non GET request \".concat(request.method));\n    }\n\n    return;\n  } // Ignore online features. / Login & Logout\n\n\n  if (assetsToSkip.includes(request.url)) {\n    return;\n  }\n\n  var requestUrl = new URL(request.url); // Ignore DB access.\n\n  if (requestUrl.origin === 'https://db.davbros.com.ar') {\n    if (DEBUG) {\n      console.log(\"[SW] Ignore difference origin \".concat(requestUrl.origin));\n    }\n\n    return;\n  }\n\n  var resource = __webpack_require__.g.caches.match(request).then(function (response) {\n    if (response) {\n      if (DEBUG) {\n        console.log(\"[SW] fetch URL \".concat(requestUrl.href, \" from cache\"));\n      }\n\n      return response;\n    } // Load and cache known assets.\n\n\n    return fetch(request, {\n      redirect: 'follow'\n    }).then(function (responseNetwork) {\n      if (!responseNetwork || !responseNetwork.ok) {\n        if (DEBUG) {\n          console.log(\"[SW] URL [\".concat(requestUrl.toString(), \"] wrong responseNetwork: \").concat(responseNetwork.status, \" \").concat(responseNetwork.type));\n        }\n\n        return responseNetwork;\n      }\n\n      if (DEBUG) {\n        console.log(\"[SW] URL \".concat(requestUrl.href, \" fetched\"));\n      }\n\n      var responseCache = responseNetwork.clone();\n      __webpack_require__.g.caches.open(CACHE_NAME).then(function (cache) {\n        // console.log('Request');\n        // console.log(request);\n        // console.log('ResponseCache');\n        // console.log(responseCache);\n        // // Ahora lo vemos\n        // if (assetsToSkip.includes(request.url)) {\n        //   return responseNetwork;\n        // }\n        return cache.put(request, responseCache);\n      }).then(function () {\n        if (DEBUG) {\n          console.log(\"[SW] Cache asset: \".concat(requestUrl.href));\n        }\n      });\n      return responseNetwork;\n    })[\"catch\"](function () {\n      // User is landing on our page.\n      if (event.request.mode === 'navigate') {\n        return __webpack_require__.g.caches.match('./');\n      }\n\n      return null;\n    });\n  });\n  event.respondWith(resource);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/sw.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/sw.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;